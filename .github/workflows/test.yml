name: Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd gemini-gradio-poc
        pip install pytest ruff
        # Install minimal dependencies for testing
        pip install pandas python-dotenv pydantic || true
    
    - name: Run linting with ruff
      run: |
        cd gemini-gradio-poc
        ruff check --fix --exit-non-zero-on-fix . || echo "Linting issues found but continuing"
    
    - name: Run syntax checking
      run: |
        cd gemini-gradio-poc
        python -m py_compile $(find . -name "*.py" | grep -v __pycache__) || echo "Syntax issues found but continuing"
    
    - name: Run test_config_manager.py
      id: test_config_manager
      continue-on-error: true
      run: |
        cd gemini-gradio-poc
        python -m pytest tests/test_config_manager.py -v
    
    - name: Run test_persistence_manager.py  
      id: test_persistence_manager
      continue-on-error: true
      run: |
        cd gemini-gradio-poc
        python -m pytest tests/test_persistence_manager.py -v || echo "Persistence tests require additional dependencies"
    
    - name: Test basic imports
      run: |
        cd gemini-gradio-poc
        python -c "from utils.config_manager import get_default_config; print('Config manager imports successfully')"
        python -c "from utils.persistence_manager import save_knowledge_base; print('Persistence manager imports successfully')" || echo "Persistence manager requires additional dependencies"
    
    - name: Comment on PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Initialize array to track failing tests
          const failing = [];
          
          if ('${{ steps.test_config_manager.outcome }}' !== 'success') failing.push('test_config_manager.py');
          if ('${{ steps.test_persistence_manager.outcome }}' !== 'success') failing.push('test_persistence_manager.py');
          
          let body = '';
          
          if (failing.length > 0) {
            body = '## ❌ Test Failures Detected\n\nThe following test files are failing:\n\n';
            failing.forEach(test => {
              body += `- ${test}\n`;
            });
            body += '\nPlease review and fix these failures.';
          } else {
            body = '## ✅ All Tests Passed\n\nGreat job! All test files are passing.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });